# top level modules
modules:
  - name: domain
    class: com.walmartlabs.bigben.providers.domain.cassandra.CassandraModule
  - name: processors
    object: com.walmartlabs.bigben.processors.ProcessorRegistry
  - name: hz
    class: com.walmartlabs.bigben.utils.hz.Hz
  - name: scheduler
    object: com.walmartlabs.bigben.SchedulerModule
  - name: events
    object: com.walmartlabs.bigben.EventModule
  - name: messaging
    object: com.walmartlabs.bigben.kafka.KafkaModule
    enabled: ${kafka.module.enabled:-false}
  - name: cron
    object: com.walmartlabs.bigben.cron.CronRunner
    enabled: ${cron.module.enabled:-false}

# hazelcast properties
hz:
  template: file://hz.template.xml
  group:
    name: bigben-dev
    password: bigben-dev
  network:
    autoIncrementPort: true
    members: 127.0.0.1
    port: 5701
  map:
    store:
      writeDelay: 30

# message related properties
messaging.producer.factory.class: com.walmartlabs.bigben.kafka.KafkaMessageProducerFactory

# cassandra related properties
cassandra:
  keyspace: bigben
  cluster:
    contactPoints: 127.0.0.1
    clusterName: bigben-cluster
    port: 9042
    localDataCenter: null
    coreConnectionsPerLocalHost: 1
    maxConnectionsPerLocalHost: 1
    coreConnectionsPerRemoteHost: 1
    maxConnectionsPerRemoteHost: 1
    maxRequestsPerLocalConnection: 32768
    maxRequestsPerRemoteConnection: 2048
    newLocalConnectionThreshold: 3000
    newRemoteConnectionThreshold: 400
    poolTimeoutMillis: 0
    keepTCPConnectionAlive: true
    connectionTimeOut: 5000
    readTimeout: 12000
    reconnectPeriod: 5
    username: null
    password: null
    downgradingConsistency: false
    writeConsistency: LOCAL_ONE
    readConsistency: LOCAL_ONE

# kafka consumer properties
kafka:
  consumers:
    - num.consumers: ${num.consumers:-8}
      processor.impl.class: com.walmartlabs.bigben.kafka.ProcessorImpl
      topics: ${bigben.inbound.topic.name:-null}
      max.poll.wait.time: ${max.poll.wait.time:-10000}
      message.retry.max.count: ${message.retry.max.count:-10}
      config:
        key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
        bootstrap.servers: ${bigben.inbound.topic.bootstrap.servers:-null}
        #fetch.min.bytes: 1
        group.id: ${group.id:-bigben-inbound}
        heartbeat.interval.ms: ${heartbeat.interval.ms:-3000}
        session.timeout.ms: 30000
        auto.offset.reset: ${auto.offset.reset:-latest}
        fetch.max.bytes: 324000
        max.poll.interval.ms: 30000
        max.poll.records: 100
        receive.buffer.bytes: 65536
        request.timeout.ms: 60000
        #send.buffer.bytes: 131072
        enable.auto.commit: ${enable.auto.commit:-false}
  producer:
    config: # this is default kafka producer config, these values will be used if not supplied during the tenant registration
      key.serializer: org.apache.kafka.common.serialization.StringSerializer
      value.serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: "1"
      buffer.memory: 32400
      retries: 3

# system properties
task:
  executor:
    #retry.thread.count: 8
    retry.time.units: SECONDS
    delay: 1
    max.retries: 3
    backoff.multiplier: 2

app.server.port: 8080
generic.future.max.get.time: 60

events:
  scheduler.enabled: true
  schedule.scan.interval.minutes: 1
  num.shard.submitters: 8
  receiver:
    shard.size: 1000
    lapse.offset.minutes: 0
    delete:
      max.retries: 3
      initial.delay: 1
      backoff.multiplier: 1
  submit:
    initial.delay: 1
    backoff.multiplier: 1
    max.retries: 3
  processor:
    max.retries: 3
    initial.delay: 1
    backoff.multiplier: 2
    eager.loading: true
  tasks:
    max.events.in.memory: 100000
    scheduler.worker.threads: 8

# bucket manager / loader related properties
buckets:
  backlog.check.limit: 1440 # 1 Day
  background:
    load.fetch.size: 100
    load.wait.interval.seconds: 15

cron:
  runner:
    core.pool.size: 8
  load:
    max.retries: 10
    delay: 1
    backoff.multiplier: 1
    time.units: "SECONDS"